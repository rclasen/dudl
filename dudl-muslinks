#!/usr/bin/perl -w


# $Id: dudl-muslinks,v 1.8 2007-01-12 09:04:52 bj Exp $

# TODO: move database access to unit
# TODO: use ids for filenames

use strict;
use Getopt::Long;
use Dudl::DB;
use Dudl::Job::Archive;

=pod

=head1 NAME

dudl-muslinks - generate symlink farm from music DB

=head1 SYNOPSIS

dudl-musdirs [<opts>]

=head1 DESCRIPTION

This script generates a directory structure according to the music DB
information pointing to the actual files.

Symlinks are named according to your Dudl::Naming module and placed below
<dir>/<artist>/<naming_dir>/<naming_fname>. They point to the file below
"cdpath" (as retrieved from dudlrc).

=head1 OPTIONS

=over 4

=item B<--help>

short usage info.

=item B<--dir>=<dir>

where to create directory structure with symlinks.

=back

=head1 SEE ALSO

I<Dudl::Overview>

=head1 AUTHOR

Rainer Clasen

=cut

my $opt_help = 0;
my $opt_dir = "./tracks";
my $needhelp = 0;

if( ! GetOptions(
	"help|h!"		=> \$opt_help,
	"dir|d=s"		=> \$opt_dir,
) ){
	$needhelp ++;
}

if( $opt_help ){
	print <<EOF;
usage: $0 [opts]
generate mserv directory trees
 --dir <dir>               default: './tracks'
 --help
EOF
	exit 0;
}

# TODO: remove check, when ' in directory names is supported
if( $opt_dir =~ /'/ ){
	print STDERR "unsupported characters in directory name\n";
	$needhelp++;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}

my $dudl = Dudl::DB->new;
my $db = $dudl->db;
my $nam = $dudl->naming;

my %sym;
if( ! -d $opt_dir ){
	print "creating $opt_dir\n";
	mkdir $opt_dir, 0777 || die "mkdir('$opt_dir'): $!";
} else {
	&find( $opt_dir, \%sym );
}

print "adding links ...\n";

my $query = "
SELECT 
	al.id AS al_id,
	ala.nname AS al_artist,
	al.album AS al_album, 
	date_part('year',al.publish_date) AS al_year,
	fi.id AS fi_id, 
	fi.album_pos AS fi_pos,  
	fi.title AS fi_title, 
	tia.nname AS fi_artist, 
	mserv_tags(fi.id) AS fi_tags,
	stor_filename(su.collection, su.colnum, fi.dir, fi.fname) AS fi_name,
	fi.cmnt AS fi_cmnt
FROM 
	mus_album al 
		INNER JOIN mus_artist ala
		ON al.artist_id = ala.id 

		INNER JOIN stor_file fi
		ON al.id = fi.album_id 

		INNER JOIN mus_artist tia
		ON fi.artist_id = tia.id 

		INNER JOIN stor_unit su
		ON fi.unit_id = su.id 
WHERE 
	NOT fi.broken AND
	fi.title NOTNULL
ORDER by 
	ala.nname, 
	al.album,
	fi.album_pos;
";

my $sth = $db->prepare( $query );
if( ! $sth ){
	die $db->errstr ."\nquery: $query\n";
}

my $res = $sth->execute;
if( ! $res ){
	die $sth->errstr ."\nquery: $query\n";
}

my (
	$al_id,
	$al_artist, 
	$al_album, 
	$al_year,
	$fi_id, 
	$fi_pos, 
	$fi_title, 
	$fi_artist, 
	$fi_tags,
	$fi_name, 
	$fi_cmnt,
);
$sth->bind_columns( \( 
	$al_id,
	$al_artist, 
	$al_album, 
	$al_year,
	$fi_id, 
	$fi_pos, 
	$fi_title, 
	$fi_artist, 
	$fi_tags,
	$fi_name,
	$fi_cmnt,
) );

my $old_artistd;
my $old_aid; 
my $albumd;
my $job;

while( defined $sth->fetch ){
	my $artistd = $nam->fnormalize( $al_artist );

	if( ! defined $old_artistd or $old_artistd ne $artistd ){
		delete $sym{$artistd};
		mkdir "$opt_dir/$artistd", 0777 ||
			die "mkdir('$opt_dir/$artistd'): $!";
		$old_artistd = $artistd;
	}


	if( ! defined $old_aid or $old_aid != $al_id ){
		&finish( $albumd, $job ) if defined $job;
		$job = new Dudl::Job::Archive( naming => $dudl->naming );

		$job->add_album(
			name	=> $al_album,
			artist	=> $al_artist,
			type	=> $al_artist =~ /^(VARIOUS|UNKNOWN)$/ 
				? "sampler" : "album",
			year	=> $al_year || 1000,
		);

		$albumd = $artistd ."/". $nam->dir( $job->album );
		delete $sym{$albumd};
		mkdir "$opt_dir/$albumd", 0777 ||
			die "mkdir('$opt_dir/$albumd'): $!";

		$old_aid = $al_id;

	} 
	
	$job->add_file( 
		id	=> $fi_id, 
		mp3	=> "-",
		broken	=> 0,
		cmt	=> $fi_cmnt,
	);

	$job->add_title(
		id	=> $fi_id,
		name	=> $fi_title,
		artist	=> $fi_artist, 
		num	=> $fi_pos, 
		genres	=> $fi_tags, 
	);

	my $lname = $nam->fname( $job->album, $job->title );
	$job->file->{mp3} = $lname;

	$lname = $albumd ."/". $lname;
	my $dst = $dudl->conf("cdpath") . "/". $fi_name;
	delete $sym{$lname};
	symlink $dst, "$opt_dir/$lname";
}	

$sth->finish;
&finish( $albumd, $job ) if defined $job;

print "cleaning old stuff ...\n";
&cleanup( $opt_dir, \%sym );

exit 0;

sub finish {
	my( $dir, $job ) = @_;

	my $jname = "$dir/". $dudl->conf("write_jname");
	delete $sym{$jname};

	local *J;
	open( J, ">$opt_dir/$jname" ) or die "open failed: $!";
	$job->write( \*J );
	close( J );
}

sub find {
	my $dir = shift;
	my $h = shift;

	local *F;

	%$h = ();

	# TODO: escape ' in $dir
	print "scanning $dir...\n";
	open( F, "cd '$dir' && find . |" ) || die "find failed: $!";
	while( <F> ){
		chomp;
		s/^\.\///;
		$h->{$_} = 1;
	}
	close F;
}

sub cleanup {
	my $dir = shift;
	my $h = shift;

	foreach my $k ( sort { $a cmp $b } keys %$h ){
		my $p = $dir ."/". $k;
		if( -d $p ){
			rmdir( $p );
		} else {
			unlink( $p );
		}
	}
}
