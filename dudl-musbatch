#!/usr/bin/perl -w

# $Id: dudl-musbatch,v 1.8 2008-12-28 11:39:23 bj Exp $

#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

use strict;
use Getopt::Long;
use Dudl::DB;
use Dudl::StorUnit;
use File::Temp qw( tempfile );

# TODO: optionally use one jobfile for all directories
# TODO: let user edit all files at once 
# TODO: multiple units
# TODO: change flow: first check all jobfiles, then import them in one go

=pod

=head1 NAME

dudl-musbatch - assist you in adding music DB entries for one stor_unit

=head1 SYNOPSIS

dudl-musbatch [<opts>] <unit>

=head1 DESCRIPTION

This is basically a wrapper around B<dudl-musdirs>, B<dudl-musgen> and
B<dudl-musimport>.

Using these tools you can pick the directories of one unit you want to
work on, edit the jobfile, that's generated from these files and import
this jobfile to your music DB.

Existing arhive jobfiles are used.

When all files in a directory are already part of the music DB, the
directory is skipped.

If there were failures propagating the jobfile to the music DB, you're
asked, what to do next (including re-editing the jobfile).

=over 4

=item <unit>

The name of the unit - combined from "collection" and "colnum". For
example "ab2".

=back

=head1 OPTIONS

=over 4

=cut

$ENV{EDITOR} ||= "vi";
$ENV{TMPDIR} ||= "/tmp";

my $dudl = Dudl::DB->new;
my $cdpath = $dudl->conf("cdpath");
my $afile = $dudl->conf("write_jname");

my $unit;

=pod

=item B<--pickdirs>

Lets you edit the list of directories you want to add to your music DB.
By default all directories are processed.

=cut

my $opt_pickdirs;

=pod

=item B<--manual>

Usually a directory is automatically propagated to the music DB if an
archive jobfile was found. With this option you get the chance to edit the
jobfile before it is imported. If you know, the import is going to fail,
anyways, you can skip one failed attempt and the following "what shall I
do prompt".

=cut

my $opt_manual;

my $needhelp;
my $wanthelp;

if( ! GetOptions(
	"help|h!"	=> \$wanthelp,
	"pickdirs|p!"	=> \$opt_pickdirs,
	"manual|m!"	=> \$opt_manual,
)){
	$needhelp++;
}

if( $#ARGV == 0 ){
	$unit = shift;
	if( $unit !~ /^(\w+)(\d+)$/ ){
		print STDERR "invalid unit specifier\n";
		$needhelp++;
	}
} else {
	print STDERR "invalid number of arguments\n";
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
usage: $0 <unit>
--manual      also edit jobfiles generated from archive jobfile before import
--pickdirs    select directories to import
--help        this crap
EOF
	exit 0;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}

# step1: 
# build list with directories and let user decide which to process

# TODO: make dudl-musdirs a module and use it directly
my($tit, $fil, $unitid, $dir);
my( $tfh, $tfn ) = tempfile;
open( DFH, "dudl-musdirs '$unit'|" ) or die "open(dudl-musdirs): $!";
# header:
$_ = <DFH>; 
print $tfh $_;
# rest:
while(<DFH>){
	chomp;
	s/^\s+//;
	($tit, $fil, $unitid, $dir) = split /\s+/,$_,4;
	if( $tit ){
		print STDERR "skipping non-virgin '$dir'\n";
		next;
	}
	printf $tfh "%4s %4d %7d %s\n", $tit, $fil, $unitid, $dir;
}
close(DFH);
close($tfh);

if( $opt_pickdirs ){
	system( $ENV{EDITOR}, $tfn ) and die "open(editor): $!";
}

# step2:
# read directory list and process each directory

open( FH, "$tfn" ) or die "open: $!";
$_ = <FH>; # skip header
while(<FH>){
	chomp;
	s/^\s+//;
	($tit, $fil, $unitid, $dir) = split /\s+/,$_,4;
	&dodir( $unitid, $dir ) && last;
}
close(FH);

unlink($tfn);




sub dodir {
	my( $unitid, $dir ) = @_;

	# TODO: make dudl-musgen a module and use it directly
	# TODO: make dudl-musimport a module and use it directly

	print "\n\nprocessing $dir...\n";

	my $unit = Dudl::StorUnit->load( dudl => $dudl,
		where => { id => $unitid } );
	my $jobpath = $cdpath ."/". $unit->dir ."/$dir/$afile";

	my $needuser;
	-r $jobpath || $needuser++;
	$opt_manual && $needuser++;



	my( $doexit, $donext );
	my $tfn;
	do {

		# create/rebuild jobfile
		if( ! $tfn ){
			my $tfh;
			( $tfh, $tfn ) = tempfile;
			open( GFH, "dudl-musgen '$unitid' '$dir'|" ) 
				or die "open(dudl-musgen): $!";
			while( <GFH> ){
				print $tfh $_;
			}
			close(GFH);
			close($tfh);
		}

		# edit jobfile / decide what to do
		my $reply;
		if( ! $needuser ){
			$reply = "i";
			$needuser++;

		} else {
			system( $ENV{EDITOR}, $tfn ) and die "open(editor): $!";
			do {
				print <<EOP;
what shall I do?
 r - re-generate list loosing your changes
 e - re-edit list
 i - add list to database
 n - skip to next
 x - exit
EOP

				$reply = <STDIN>;
				chomp $reply;
			} until $reply =~ /^[reinx]$/;
		}


		# ACTION!
		if( $reply eq "r" ){
			unlink( $tfn );
			$tfn = undef;

		} elsif( $reply eq "e" ){
			# next round

		} elsif( $reply eq "i" ){
			print "importing $dir...\n";
			if( 0 == system( "dudl-musimport", $tfn ) ){
				$donext++;
			} else {
				print "press ENTER to continue\n";
				<STDIN>;
			}

		} elsif( $reply eq "n" ){
			$donext++;

		} elsif( $reply eq "x" ){
			$doexit++;
		}

	} until( $doexit or $donext );

	unlink $tfn if $tfn;

	return( $doexit ? 1 : 0 );
}

=pod

=back

=head1 EXAMPLES

dudl-musbatch sl143

=head1 SEE ALSO

I<Dudl::Overview>,
I<dudl-musdirs>,
I<dudl-musgen>,
I<dudl-musimport>

=head1 AUTHOR

Rainer Clasen

=cut


