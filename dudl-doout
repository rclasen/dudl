#! /usr/bin/perl -w

# $Id: dudl-doout,v 1.8 2008-12-28 11:39:23 bj Exp $

#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

use strict;
use Getopt::Long;
use Dudl::Config;
use Dudl::Misc;

=pod

=head1 NAME

dudl-doout - rename MP3s from 2test/3ren/... and place them in 3ren/4out

=head1 SYNOPSIS

dudl-doout [<opts>] [<genre> <dir> ...]

=head1 DESCRIPTION

TODO man desc


=head1 OPTIONS

=over 4

=item B<--delall>

Don't ask before deleting successfully processed directories.

=item B<--ibad>

Ignore bad jobfiles.

=item B<--help>

display short usage info.

=cut

my $opt_delall;
my $opt_ibad;

my $wanthelp;
my $needhelp;

if( ! GetOptions(
	"delall!"	=> \$opt_delall,
	"ibad!"		=> \$opt_ibad,
	"help!"		=> \$wanthelp,
)){
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
usage: $0 <opts> [<genre> <dir> ...]
 rename MP3s from 2test/3ren/... and place them in 3ren/4out. Successfully
 processed directories are deleted after your confirmation.
options:
 --delall                don't ask before deleting processed directories
 --ibad                  Ignore bad jobfiles.
 --help                  this short usage information.
EOF
	exit 0;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}

my $dudl = new Dudl::Config;

my $rdir = $dudl->conf("workpath") . "/3ren";
my $odir = $dudl->conf("workpath") . "/4out";

my @jobnames = ("", qw( /ren /TRACKS.dudl_rename /TRACKS.dudl_archive));

if( $#ARGV < 0 ){
	opendir(R, $rdir)
		or die "opendir: $!";
	while ( defined (my $gdir = readdir(R)) ){
		&do_gdir( $gdir ) or exit 1;
	}
	closedir(R);

} elsif( $#ARGV < 1 ){
	print STDERR "missing directories\n";
	exit 1;

} else {
	my $genre = shift;

	foreach my $dir (@ARGV){
		&do_dir( $genre, $dir )
			or exit 1;
	}
}

sub do_gdir {
	my( $gdir ) = @_;

	&checkgenre($gdir) or return 1;

	opendir(G, "$rdir/$gdir" )
		or die "opendir: $!";
	while ( defined (my $dir = readdir(G)) ){
		next if $dir =~ /^\./;
		&do_dir( $gdir, "$rdir/$gdir/$dir" ) or return;
	}
	closedir(G);

	return 1;
}

sub do_dir {
	my( $garg, $arg ) = @_;

	print $arg, "\n";

	my $genre = &checkgenre($garg);
	if( ! defined $genre ){
		print STDERR "invalid genre: $garg\n";
		return;
	}
	
	foreach my $f ( @jobnames ){
		if( -f "$arg$f" ){
			$arg .= $f;
			last;
		}
	}
	if( ! -f $arg ){
		print STDERR "no such file: $arg\n";
		return;
	}

	if( $arg !~ /^(.+)\/([^\/]+)$/ ){
		print STDERR "unable to cope with unexpected job name: $arg\n";
		return;
	}

	my $dir = $1;
	my $ren = $arg;

	if( $opt_ibad && system( "dudl-rename --test '$ren' > /dev/null 2>&1" )) {
		return 1;
	}

	-d "$odir/$genre" or mkdir "$odir/$genre", 0777;
	system("dudl-rename", "--outdir", "$odir/$genre", $ren) == 0
		or die "rename failed: $!";
	
	if( ! $opt_delall ){
		print "hit ENTER to continue";
		$_ = <STDIN>;
		exit if /^q$/i;
	}

	system("rm", "-rf", $dir) == 0
		or die "rm failed: $!";
}


=pod

=head1 SEE ALSO

I<Dudl::Overview>

=head1 AUTHOR

Rainer Clasen

=cut

