#!/usr/bin/perl -w

# $Id: dudl-musgen,v 1.3 2006-01-25 16:37:28 bj Exp $


use strict;
use Getopt::Long;
use Dudl::DB;
use Dudl::StorUnit;
use Dudl::Suggester;
use Dudl::Job::Music;
use Dudl::Job::Archive;
use Data::Dumper;

=pod

=head1 NAME

dudl-musgen - generate jobfile template for later import into music DB

=head1 SYNOPSIS

dudl-musgen <unitID> <dir> [<genre>]

=head1 DESCRIPTION

Generates a jobfile for later use by dudl-musimport. It looks at
filenames, ID3 Tags as stored in the DB and existing archive jobfiles for
suggesting Title names, artists and album names. Dudl::Suggester is used
to handle these suggestions.

=over 4

=item <unitID>

numeric Unit ID as displayed by dudl-musdirs.

=item <dir>

directory of this unit to pick files from.

=item <genre> DEPRECATED

Genre to set for all files. Optional. This is deprecated. Please use the
search and replace feature of your editor when you're editing the jobfile.

=back

=head1 OPTIONS

=over 4

=cut


# TODO: let user specify a mus_album
# TODO: merge with an existing mus_album
# TODO: edit an existing mus_album

# TODO: edit already added directory
# - search for files in directory
# - fetch matching mus entries (use those from search if user requested)
# - generate template


my $dudl = new Dudl::DB;
my $cdpath = $dudl->conf("cdpath");

=pod

=item --max=<num>

Offer at most <num> suggestions for each file

=cut

my $opt_max = $dudl->conf("sug_max");

=pod

=item --minscore=<num>

minimum score a suggestion must have.

=cut

my $opt_minscore = $dudl->conf("sug_score");

=pod

=item --id

use ID3 information from Database for suggestions.

=cut

my $opt_id = $dudl->conf("sug_id3");

=pod

=item --stored

use stored regexps for Suggestions.

=cut

my $opt_stored = $dudl->conf("sug_int");

=pod

=item --archive

use archive jobfile (if found) for Suggestions.

=cut

my $opt_archive = 1;

=pod

=item --afile=<fname>

Basename for archive jobfiles.

=cut

my $opt_afile = $dudl->conf("write_jname");

=pod

=item --help

short usage information.

=cut

my $opt_help = 0;
my $needhelp = 0;

my( $unitid, $dir, $genre );

sub usage {
	print { $_[0] } "usage: $0 [opts] <unitid> <dir> [<genres>]
generate job file for dudl-musimport
optons:
 --max <n>       maximum number of suggestions per file
 --minscore <n>  minimum score suggestions must have
 --[no]id        get suggestions from IDtags in storage tables
 --[no]stored    use stored regexps for suggestions
 --[no]archive   try to get suggestions from an archive file
 --afile <f>     override archive jobfile

 --help          this help
";
}


if( !GetOptions(
	"max=i"		=> \$opt_max,
	"minscore=i"	=> \$opt_minscore,
	"id!"		=> \$opt_id,
	"stored!"	=> \$opt_stored,
	"archive!"	=> \$opt_archive,
	"afile=s"	=> \$opt_afile,
	"help|h!"	=> \$opt_help,
)){
	$needhelp++;
}

$unitid = shift;
if( ! $unitid || ! $unitid =~ /^\d+$/ ){
	print STDERR "need numeric unit ID\n";
	$needhelp ++;
}

$dir = shift;
if( ! $dir ){
	print "need a directory (at least '/')\n";
	$needhelp ++;
}

$genre = shift || "";
$genre = "" if $genre eq "-";

if( $opt_afile =~ /\// ){
	print STDERR "archive jobfile must be a basename\n";
	$needhelp++;
}

if( $opt_help ){
	&usage( \*STDOUT );
	exit 0;
}

if( $needhelp ){
	&usage( \*STDERR );
	exit 1;
}


my $db = $dudl->db;

my $arch;
if( $opt_archive ){
	my $unit = Dudl::StorUnit->load( dudl => $dudl, 
		where => { id => $unitid } );
	my $path = $cdpath ."/". $unit->dir ."/";
	$path .= $dir ."/" if $dir;
	$path .= $opt_afile;
	$arch = new Dudl::Job::Archive( naming => $dudl->naming, 
		file => $path );
}

my $exp = new Dudl::Suggester;
my $job = new Dudl::Job::Music( naming => $dudl->naming );
$job->add_album(); # ignore retval, user edits this anyways

# TODO: move database access to module
my $query =
	"SELECT ".
		"id, ".
		"fname, ".
		"id_title, ".
		"id_artist, ".
		"id_album, ".
		"id_tracknum, ".
		"title ".
	"FROM stor_file ".
	"WHERE ".
		"unit_id = $unitid AND ".
		"dir = ". $db->quote( $dir, DBI::SQL_CHAR ) ." ".
	"ORDER BY ".
		"fname";

my $sth = $db->prepare( $query );
if( ! $sth ){
	die $db->errstr ."\nquery: $query\n";
}

my $res = $sth->execute;
if( ! $res ){
	die $sth->errstr ."\nquery: $query\n";
}
print STDERR "found $res files\n";

my( $id, $fname, 
	$id_title, $id_artist, $id_album, $id_tracknum, 
	$title );
$sth->bind_columns( \( $id, $fname, 
	$id_title, $id_artist, $id_album, $id_tracknum,
	$title ) );

my %album;
my $nr = 0;
while( defined $sth->fetch ){
	my $path = ($dir ? $dir ."/" : "") .$fname;

	$nr ++;
	$exp->clear();

	$job->add_file( 
		mp3	=> $path,
		id	=> $id, 
	) or die;

	if( defined $title ){
		print STDERR "WARNING: data for this file was already entered!\n";

=pod
		# TODO: fetch music data from stor_file
		$exp->add_asis( 
			source		=> "stor_file:$id",
			artist		=> $,
			titlenum	=> $ || $nr,
			title		=> $title,
			genres		=> $,
			cmt		=> $,
			album		=> $,
			preference	=> 4,
		);

=cut
	}

	if( $arch ){
		$arch->rewind;
		while( my($alb,$fil,$tit) = $arch->next ){
			my $n = $fil->{mp3};
			if( $path =~ /(^|\/)\Q$n\E$/i ){
				$exp->add_asis(
				artist		=> $tit->{artist},
				titlenum	=> $tit->{num} || $nr,
				title		=> $tit->{name},
				genres		=> $tit->{genres},
				cmt		=> $tit->{cmt},
				album		=> $alb->{name},
				source		=> "archive",
				preference	=> 3,
				);

				$job->file->{encoder} = $tit->{encoder};
				$job->file->{broken} = $tit->{broken};
				$job->file->{cmt} = $tit->{cmt};
				last;
			}
		}
	}


	# suggest at least an empty one
	$exp->add( source => "empty" );

	# suggest idtag
	if( $opt_id ){
		$exp->add(
			artist		=> $id_artist,
			titlenum	=> $id_tracknum || $nr,
			title		=> $id_title,
			album		=> $id_album,
			source		=> "ID3",
			);
	}

	# suggest with stored regexps
	if( $opt_stored ){
		$exp->add_stor( $path );
	}


	$exp->order;
	my $sug;
	my $sugnum = 0;
	while( ( ! $opt_max || $sugnum < $opt_max ) && 
	    defined ($sug = $exp->get) ){

		next if $sugnum && $sug->{sug_quality} < $opt_minscore;

	    	$job->add_title(
			id	=> $sug->{titleid} || undef,
			source	=> $sug->{source} ." score: ".
				$sug->{sug_quality},
			name	=> $sug->{title},
			artist	=> $sug->{artist}, 
			num	=> $sug->{titlenum} || $nr, 
			genres	=> $genre || $sug->{genres} || "",
			cmt	=> $sug->{cmt} || "",
		); # ignore retval, user edits this anyways
		$album{name}{$sug->{album}}++ if $sug->{album};
		$album{artist}{$sug->{artist}}++ if $sug->{artist};

		$sugnum ++;
	}
}	
$sth->finish;

@_ = sort { $album{name}{$b} <=> $album{name}{$a} } keys %{$album{name}};
if( @_ && 3* $album{name}{$_[0]} >= scalar @_ ){
	$job->album->{name} = $_[0];
}

@_ = sort { $album{artist}{$b} <=> $album{artist}{$a} } keys %{$album{artist}};
if( @_ && 3* $album{artist}{$_[0]} >= scalar @_ ){
	$job->album->{artist} = $_[0];
	$job->album->{type} = 'album';
}

if( $arch ){
	foreach( qw(artist name type year)){
		$job->album->{$_} = $arch->album->{$_};
	}
}

$job->write( \*STDOUT );

=pod 

=head1 EXAMPLES

dudl-musgen 308 Axxis.--.Axxis.II

=head1 SEE ALSO

I<Dudl::Overview>,
I<Dudl::Job::Archive>,
I<Dudl::Job::Music>,
I<Dudl::Suggester>,
I<dudl-musimport>,
I<dudl-musdirs>,
I<dudl-musbatch>

=head1 AUTHOR

Rainer Clasen

=cut


