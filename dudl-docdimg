#! /usr/bin/perl -w

# $Id: dudl-docdimg,v 1.7 2008-12-28 11:39:22 bj Exp $

#
# Copyright (c) 2008 Rainer Clasen
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

use strict;
use Getopt::Long;
use Dudl::DB;
use Dudl::Misc;
use Dudl::StorUnit;
use Dudl::Job::Archive;

=pod

=head1 NAME

dudl-docdimg - generate CD images for storage units

=head1 SYNOPSIS

dudl-docdimg [<opts>] <dir> ...

=head1 DESCRIPTION

TODO man desc


=head1 OPTIONS

=over 4

=item B<--out> <dir>

where to place generated images. default=.

=cut

my $opt_out = ".";

=pod

=item B<--check>

check if unit already exists

=cut

my $opt_check = 1;

=pod

=item B<--dupcheck>

check if albums already exist

=cut

my $opt_dupcheck = 1;

=pod

=item B<--help>

display short usage info.

=cut

my $wanthelp;
my $needhelp;

if( ! GetOptions(
	"help!"		=> \$wanthelp,
	"out=s"		=> \$opt_out,
	"check!"	=> \$opt_check,
	"dupcheck!"	=> \$opt_dupcheck,
)){
	$needhelp++;
}

if( $#ARGV < 0 ){
	print STDERR "missing input directories\n";
	$needhelp++;
}

foreach my $dir ( @ARGV ){
	if( ! &unitsplit($dir) ){
		print STDERR "invalid dir name: $dir\n";
		$needhelp++;
	}

	unless( -d $dir ){
		print STDERR "no such dir: $dir\n";
		$needhelp++;
	}
}

if( $wanthelp ){
	print <<EOF;
usage: $0 <opts> <dir> ...
 generate CD images for storage units
options:
 --out=<dir>             specify location to place images in
 --help                  this short usage information.
 --check                 check DB, if unit already exists (default)
 --dupcheck              check DB if albums do already exist
EOF
	exit 0;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}

my $dudl = new Dudl::DB;
my $db = $dudl->db;

foreach my $dir ( @ARGV ){
	my( $col, $num ) = &unitsplit( $dir );

	if( $opt_check && &unit_exists( $dir )){
		die "unit already exists: $dir";
	}

	if( $opt_dupcheck && &albums_find( $dir )){
		die "some albums already exist in $dir";
	}

	my $unit = sprintf "\%s%04d", $col, $num;
	my $iso = "$opt_out/$unit.iso";

	-r $iso && die "image already exists: $iso";
	
	print "generating $iso ...\n";
	# TODO: escape $dir and $iso or pass array to system()
	system( "mkisofs -q -J -r -V _MP3_${num}_ -o '$iso' '$dir'" )
		and die "mkisofs failed: $!";
}

sub album_exists {
	my $alb = shift;

	my $album = $db->quote( $alb->{name}, 1 ); # TODO: DBI::CHAR );
	my $artist = $db->quote( $alb->{artist}, 1 ); # TODO: DBI::CHAR );

	my( $artistid )= $db->selectrow_array( 
		"SELECT ".
                        "id ".
                "FROM mus_artist ".
                "WHERE ".
                        "LOWER(nname) = LOWER($artist) ".
                "LIMIT 1" );
	return 0 unless $artistid;

	my( $albumid ) = $db->selectrow_array( 
		"SELECT ".
			"id ".
		"FROM mus_album ".
		"WHERE ".
			"LOWER(album) = LOWER($album) ".
			"AND artist_id = $artistid ".
		"LIMIT 1");
	if( $albumid ){
		print STDERR "ERROR: album $alb->{artist} - $alb->{name} already present as id $albumid\n";
		return 1;
	}

	return 0;
}


sub albums_find {
	my $dir = shift;

	opendir(D, $dir ) or die "opendir: $!";
	my @dirs = grep { ! /^\./ && -f "$dir/$_/TRACKS.dudl_archive" } readdir D;
	closedir(D);

	my $job = new Dudl::Job::Archive( naming => $dudl->naming );
	foreach my $d ( @dirs ){
		$job->read( "$dir/$d/TRACKS.dudl_archive" ); # ignore failures
	}
	
	my $found = 0;
	$job->rewind;
	my $oalb;
	while( my( $alb, $fil, $tit) = $job->next ){
		if( ! $oalb || $oalb != $alb ){
			&album_exists( $alb ) && $found++;
			$oalb = $alb;
		}
	}

	return $found;
}

sub unit_exists {
	my $dir = shift;

	my $unit;
	eval { $unit = Dudl::StorUnit->load_path( dudl => $dudl, 
		path => $dir ); };
	return $unit;
}

=pod

=head1 SEE ALSO

I<Dudl::Overview>

=head1 AUTHOR

Rainer Clasen

=cut

